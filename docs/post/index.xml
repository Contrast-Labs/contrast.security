<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Contrast Labs</title>
    <link>https://contrast.security/post/</link>
    <description>Recent content in Posts on Contrast Labs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2021, Contrast Security; all rights reserved.</copyright>
    <lastBuildDate>Thu, 04 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://contrast.security/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Contrast Labs Reveals Dependency Confusion Vulnerability in Microsoft Teams</title>
      <link>https://contrast.security/post/dependency-confusion-microsoft-teams/</link>
      <pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://contrast.security/post/dependency-confusion-microsoft-teams/</guid>
      <description>
        
          &lt;p&gt;When the &lt;a href=&#34;https://www.contrastsecurity.com/security-influencers/hackers-exploiting-covid-19-what-organizations-can-prevent?hsLang=en-us&#34;&gt;COVID-19 pandemic&lt;/a&gt; forced a large percentage of the world’s office workers to begin working remotely a year ago, organizations were forced to scramble to greatly accelerate their digital transformation. Deployments that may have been planned for years in the future suddenly had to be pulled off in a matter of weeks and days—all because of a sudden change in the way people work.&lt;/p&gt;
&lt;p&gt;Teleconferencing and collaboration tools were one key area that required swift action. Such tools had already been growing in importance in businesses of all types, but when offices closed, they became indispensable. Microsoft Teams was one of the tools that kept professionals—and the global economy— going at full speed during the pandemic. It is no wonder that the number of daily average users (DAU) on that application &lt;a href=&#34;https://tomtalks.blog/2020/12/microsoft-teams-statistics/#:~:text=Microsoft%20Teams%20usage%20statistics&amp;amp;text=There%20were%2044%20million%20users,115%20million%20daily%20active%20users.&#34;&gt;increased&lt;/a&gt; from 44 million in April 2020 to 75 million the following month.&lt;/p&gt;
&lt;p&gt;By December, Microsoft announced that Teams had reached &lt;a href=&#34;https://www.microsoft.com/en-us/microsoft-365/blog/2020/10/28/microsoft-teams-reaches-115-million-dau-plus-a-new-daily-collaboration-minutes-metric-for-microsoft-365/&#34;&gt;115 million DAU&lt;/a&gt; — a 260% increase over nine months. At the same time, the company reported that Microsoft 365 users around the world were spending &lt;a href=&#34;https://www.microsoft.com/en-us/microsoft-365/blog/2020/10/28/microsoft-teams-reaches-115-million-dau-plus-a-new-daily-collaboration-minutes-metric-for-microsoft-365/&#34;&gt;30 billion minutes per day&lt;/a&gt; collaborating with colleagues using Teams. This astounding statistic reflects both the large number of new users and increased usage by longtime customers—one consequence of a largely home-based workforce.&lt;/p&gt;
&lt;p&gt;These numbers make it abundantly clear that Teams has become a critical tool for many businesses, nonprofits, and government agencies. Organizations that use Teams should be aware of the dependency confusion vulnerability that I recently discovered in that application and reported to Microsoft. Fortunately, Microsoft has already taken steps to deal with the specific issue I identified. But given the number of similar vulnerabilities that have been discovered over the past few weeks, it is clear that dependency confusion is a common problem across the industry.&lt;/p&gt;
&lt;h2 id=&#34;dependency-confusion-research-uncovers-new-vulnerabilities&#34;&gt;Dependency Confusion Research Uncovers New Vulnerabilities&lt;/h2&gt;
&lt;p&gt;First, a little background. As I described in a &lt;a href=&#34;https://www.contrastsecurity.com/security-influencers/dependency-confusion-a-new-third-party-risk-for-the-software-factory?hsLang=en-us&#34;&gt;recent blog post&lt;/a&gt;, security researcher Alex Birsan &lt;a href=&#34;https://blog.sonatype.com/sonatype-spots-150-malicious-npm-packages-copying-recent-software-supply-chain-attacks&#34;&gt;used dependency confusion attacks&lt;/a&gt; to push harmless proof-of-concept (POC) code to internal application development builds at more than 35 technology companies. Needless to say, his research generated significant buzz in the development and application security communities when it was published. The fact that he was able to infiltrate the software factories at some of the world’s most technologically advanced companies should give pause to any organization that uses software.&lt;/p&gt;
&lt;p&gt;Dependency confusion involves the creation of packages on third-party libraries that have identical names to packages stored in a company’s internal repository. The goal is to trick developers and automated systems into using the wrong library because of defaults configured into package managers that show a preference for external libraries over internal ones.&lt;/p&gt;
&lt;p&gt;While it should be difficult for external users—whether bad actors, legitimate developers, or security researchers—to even find the names of packages stored in internal repositories, Birsan was able to find the names of these packages in the applications themselves—and was able to replicate that accomplishment over at least 35 applications.&lt;/p&gt;
&lt;p&gt;Since Birsan’s research was published, &lt;a href=&#34;https://www.bleepingcomputer.com/news/security/malicious-npm-packages-target-amazon-slack-with-new-dependency-attacks/&#34;&gt;multiple reports&lt;/a&gt; of bad actors using the technique have &lt;a href=&#34;https://info.qentinel.com/blog/dependency-confusion-attack&#34;&gt;started to appear&lt;/a&gt;. In addition, other security researchers, including myself, began exploring various Software-as-a-Service (SaaS)-based applications to see if we could find dependency confusion vulnerabilities that could be exploited by attackers.&lt;/p&gt;
&lt;h2 id=&#34;my-research-on-microsoft-teams&#34;&gt;My Research on Microsoft Teams&lt;/h2&gt;
&lt;p&gt;A member of the Contrast Labs team, I specialize in security research on applications created with the Electron framework, including Microsoft Teams. Previously, I have discovered and reported several remote code execution vulnerabilities in that application. Given my background, I decided to contribute to the effort by examining Teams to see if I could identify a dependency confusion vulnerability.&lt;/p&gt;
&lt;h2 id=&#34;optional-dependencies-provide-an-opening&#34;&gt;Optional Dependencies Provide an Opening&lt;/h2&gt;
&lt;p&gt;I began by looking at the dependencies used by the Teams desktop application. In one section of the application, I saw a node.js package called “Optional Dependencies.” Typically, the intent of optional dependencies is to provide a place to store binary files that are a part of the testing suite, but not the production application.&lt;/p&gt;
&lt;p&gt;The interesting thing about optional dependencies is that if they do not exist in the repository from which a developer is trying to pull them, the build will fail silently. Thus, developers must write code that is relatively defensive when optional dependencies exist. Specifically, one cannot “depend” on a dependency that is optional.&lt;/p&gt;
&lt;p&gt;Inside the Teams desktop application is a package file that lists the dependencies that the application needed in order to be built. When one downloads and installs the application, it does not reach out to the dependency managers. This is because every part of the application is built on a Microsoft server somewhere, after which it is shipped to customers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/teams-manifest.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now back to what I discovered. When analyzing the package, I noticed a number of modules in both public and private repositories. I also saw that some of the private packages were not taking advantage of the &lt;a href=&#34;https://docs.npmjs.com/cli/v7/using-npm/scope&#34;&gt;scoping capability&lt;/a&gt; provided by npm. I noted that some of the optional dependencies did not exist on disk inside the package itself. This means that during the build process those dependencies would not be found in any repository—public or private. By design, these optional dependencies failed silently whenever the application attempted to pull them from both the public and private repositories.&lt;/p&gt;
&lt;h2 id=&#34;my-probe-gets-a-response&#34;&gt;My Probe Gets a Response&lt;/h2&gt;
&lt;p&gt;I then selected one of the modules that was listed as an “optional dependency” and registered it on npm, setting the version to 0.0.1. I added a simple line of code in the install script of the package to alert me when it was installed. Once I was ready to deploy, I set the version of the module to match the version number from the application. At this point, I had two choices: bump the version number up by one and wait for Microsoft to update and pull in the new version, or keep it at the current version and hope that a build server would pull in a fresh copy of it (not using packagelock.json).&lt;/p&gt;
&lt;p&gt;There are risks either way, but I decided to do what would be least impactful—keeping the version number the same. As soon as I set one of the dependencies to a high enough version, I started getting requests from the module being installed from a number of internal Microsoft IP addresses. The name of the module was relatively generic, but it was Microsoft-specific and not an overly common word.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/teams-post-install.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I happened to be doing this research late at night. Based on that and other factors, I deduced that the responses were most likely from internal, automated resources within Microsoft that were pulling the dependencies and installing them—perhaps an automated continuous integration/continuous deployment (CI/CD) server. But it could also have been a live developer working a late shift in the U.S. or a daytime shift somewhere overseas.&lt;/p&gt;
&lt;h2 id=&#34;the-risk-posed-by-this-vulnerability&#34;&gt;The Risk Posed By This Vulnerability&lt;/h2&gt;
&lt;p&gt;Whether the responses I saw were automated or manual, the fact that I was able to generate this reaction poses significant risk. By taking advantage of the post-install script, I was able to execute code in whatever environment this was being installed on. If attackers were to execute code the way I did on a build server for a desktop application update that was about to be distributed, they could insert anything they wanted into that update, and that code would go out to every desktop using Teams—more than 115 million machines. Such an attack could have monumental repercussions, potentially affecting as many organizations as the massive &lt;a href=&#34;https://www.contrastsecurity.com/security-influencers/solarwinds-hack-exposes-long-overdue-prioritization-of-software-security?hsLang=en-us&#34;&gt;attack on the SolarWinds software factory&lt;/a&gt; that was revealed in December.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/teams-build-server.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And the risk of this vulnerability may not be limited to Microsoft Teams. The fact that this package is stored in an internal repository means that it is likely used in any number of other Microsoft products. If the code in question were only a part of the Teams desktop application, it would likely be simply added to the software as custom code rather than being stored in an internal repository. As an example, the specific module used in this case is also used by Skype, which could potentially fall victim to the same kind of attack.&lt;/p&gt;
&lt;h2 id=&#34;protecting-the-software-supply-chain&#34;&gt;Protecting the Software Supply Chain&lt;/h2&gt;
&lt;p&gt;The research findings described here highlight the need for organizations to take the entire software supply chain into account when designing an application security strategy. The need to protect internally developed applications—and the third-party libraries that comprise so much of their code base these days—may seem obvious. And the importance of securing and properly configuring the developer tools used to build that software is becoming more apparent as vulnerabilities like dependency confusion are revealed.&lt;/p&gt;
&lt;p&gt;But the software supply chain does not end with the internal software factory. The potential vulnerability that I discovered in Microsoft Teams is a reminder that an organization’s application security strategy must extend to include off-the-shelf applications that every organization uses for vital business functions. Microsoft customers using the Teams desktop application have no control over how that software is produced, but they must be prepared for instances when it may be compromised.&lt;/p&gt;
&lt;h2 id=&#34;the-story-continues&#34;&gt;The Story Continues&lt;/h2&gt;
&lt;p&gt;I submitted this vulnerability to Microsoft late in the day on February 12—the Friday before a holiday weekend. Since my submission, I have received feedback from Microsoft that the packages we viewed as “at risk” were removed—or more specifically “unpublished by npm-support.” (It should be noted that Microsoft owns GitHub, which owns npm.) This means that these specific packages no longer pose a risk to Microsoft and its customers. As a result of these actions, Microsoft closed the issue as a “No Fix.” However, Microsoft has yet to give us any information around their internal investigations around their actual risk.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/teams-timeline.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Working on bug bounties is a regular part of what my team and I do at Contrast Labs. I personally derive a lot of enjoyment from doing security research. It keeps me sharp and helps keep me up with the tactics of cyber criminals. In particular, since we use a lot of SaaS applications internally at Contrast, it helps our organization as much as it helps others.&lt;/p&gt;
&lt;h2 id=&#34;for-more-information&#34;&gt;For More Information&lt;/h2&gt;
&lt;p&gt;For more information on newly discovered dependency confusion vulnerabilities impacting the software factories at numerous companies, read my earlier blog, “&lt;a href=&#34;https://www.contrastsecurity.com/security-influencers/dependency-confusion-a-new-third-party-risk-for-the-software-factory?hsLang=en-us&#34;&gt;Dependency Confusion: A New Third-Party Risk for the Software Factory&lt;/a&gt;”.&lt;/p&gt;
&lt;p&gt;Readers also may want to check out the webinar, “&lt;a href=&#34;https://www.contrastsecurity.com/webinar/how-dependency-confusion-poses-a-serious-risk-in-the-software-supply-chain?utm_campaign=WB-swsupchain-N-Q1FY22&amp;amp;utm_medium=email&amp;amp;_hsmi=112430204&amp;amp;_hsenc=p2ANqtz-_oISSnTOAus6qoDHHiJDFo3upN2n8n08Xax2azagfhrYtrTGe3JJKgr7Gx6KiOj1yVUt8ZrHqyPk2-ZLYBqwdk6W0MR38pxajcGmiHfg7mePRBnRs&amp;amp;utm_content=112430204&amp;amp;utm_source=hs_email&amp;amp;hsLang=en-us&#34;&gt;How Dependency Confusion Poses a Serious Risk in the Software Supply Chain&lt;/a&gt;”, and my interview for the Inside AppSec Podcast, “&lt;a href=&#34;https://soundcloud.com/contrastsecurity/contrast-labs-researcher-finds-dependency-confusion-vulnerability-in-microsoft-teams&#34;&gt;Contrast Labs Researcher Finds Dependency Confusion Vulnerability in Microsoft Teams&lt;/a&gt;”.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Dependency Confusion: A New Third-Party Risk for the Software Factory</title>
      <link>https://contrast.security/post/dependency-confusion-third-party-risk/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://contrast.security/post/dependency-confusion-third-party-risk/</guid>
      <description>
        
          &lt;p&gt;The SolarWinds attack has been extensively covered over the past two months—and rightly so. It has been characterized as among the worst hacks of the past 10 years, targeting SolarWinds’ software factory and compromising the code in software updates delivered to its customers.&lt;/p&gt;
&lt;p&gt;Russian nation-state attackers first gained access to the server development environment for the SolarWinds Orion infrastructure management platform in &lt;a href=&#34;https://www.itpro.com/security/358288/solarwinds-hackers-breached-systems-september-2019&#34;&gt;September 2019&lt;/a&gt; — 14 months before the attack was discovered. Microsoft President Brad Smith estimates that more than &lt;a href=&#34;https://www.infosecurity-magazine.com/news/microsoft-1000-hackers-worked/&#34;&gt;1,000 Russian engineers&lt;/a&gt; worked on the project.&lt;/p&gt;
&lt;p&gt;After moving laterally in the SolarWinds network, the attackers used &lt;a href=&#34;https://www.crowdstrike.com/blog/sunspot-malware-technical-analysis/&#34;&gt;SUNSPOT&lt;/a&gt; malware to insert a dynamic link library (called &lt;a href=&#34;https://www.cynet.com/attack-techniques-hands-on/sunburst-backdoor-c2-communication-protocol/&#34;&gt;SUNBURST&lt;/a&gt;) to create a backdoor into more than &lt;a href=&#34;https://www.bloomberg.com/news/articles/2020-12-18/russia-linked-solarwinds-hack-ensnares-widening-list-of-victims&#34;&gt;18,000 networks&lt;/a&gt; belonging to customers that installed the malicious update. These customers include &lt;a href=&#34;https://www.cnn.com/2020/12/16/politics/us-government-agencies-hack-uncertainty/index.html&#34;&gt;multiple U.S. federal government agencies&lt;/a&gt; and major &lt;a href=&#34;https://www.businessinsider.com/solarwinds-hack-explained-government-agencies-cyber-security-2020-12&#34;&gt;private corporations&lt;/a&gt; like Microsoft, Cisco, Intel, and Deloitte.&lt;/p&gt;
&lt;h2 id=&#34;protecting-the-entire-software-supply-chain&#34;&gt;Protecting the Entire Software Supply Chain&lt;/h2&gt;
&lt;p&gt;The SolarWinds event is a wake-up call to all organizations to prioritize application security—not just because of massive attacks like this one, but also because of the smaller-scale attacks that occur every day—and can potentially bring significant damage to organizations of all sizes.&lt;/p&gt;
&lt;p&gt;This event is also a reminder that organizations need to protect every element of the software supply chain, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;What you write&lt;/em&gt;: Custom code developed in-house&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What you build with&lt;/em&gt;: Hundreds of software development tools in use at many organizations&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What you buy&lt;/em&gt;: Off-the-shelf Software-as-a-Service (SaaS) applications&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What you use&lt;/em&gt;: The numerous third-party libraries that most applications depend on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Organizations must proactively work to prevent and remediate vulnerabilities in every part of the software supply chain. Recent research uncovered a new vulnerability for organizations that utilize internal and third-party libraries in their applications. But before we talk about this newly discovered dependency confusion vulnerability, I want to discuss a long-time attack tactic that is an antecedent to dependency confusion.&lt;/p&gt;
&lt;h2 id=&#34;typosquatting-taking-advantage-of-mistyping-and-inattention&#34;&gt;Typosquatting: Taking Advantage of Mistyping and Inattention&lt;/h2&gt;
&lt;p&gt;The SolarWinds attack was far from the first in which the source code of an application was manipulated by bad actors. One example is &lt;a href=&#34;https://www.csoonline.com/article/3600594/what-is-typosquatting-a-simple-but-effective-attack-technique.html&#34;&gt;typosquatting&lt;/a&gt;, which cyber criminals have used for numerous years dupe developers into using contaminated open-source libraries. The principle is simple: Busy developers’ fingers sometimes hit an incorrect key on the keyboard, so attackers reserve package names that are very similar to a legitimate package name to mimic the library that is being sought.&lt;/p&gt;
&lt;p&gt;Consider the following example. If the name of the legitimate package is Express, a cyber criminal might reserve “exprss,” “expres,” and “xpress” in the hope that developers will mistype the name. If the misspelled name returns an existing package, the developer might simply click on it rather than noticing that it is not the intended package.&lt;/p&gt;
&lt;p&gt;To avoid tipping off the developer of the error, cyber criminals program the malicious package to behave like the legitimate one — nothing seems out of the ordinary. But after the package is in the code base, the attacker sends out an update to the package to deliver malicious content into the software.&lt;/p&gt;
&lt;p&gt;To be successful, typosquatting requires victims to mistype the name of a package — and not notice the typo. And while some package managers try to combat the tactic by disallowing common misspellings of some words as package names, there is no way to eliminate every conceivable typo from the universe of available package names.&lt;/p&gt;
&lt;h2 id=&#34;dependency-confusion-not-dependent-on-misspelling&#34;&gt;Dependency Confusion: Not Dependent on Misspelling&lt;/h2&gt;
&lt;p&gt;Dependency confusion is a newly discovered vulnerability that attackers can use in a manner similar to typosquatting. It involves creating a package on an external library with the same name as an internal library in use at a particular organization. When they are not configured effectively, package managers often routinely default to external libraries over internal ones, while others access external libraries when an internal one is unavailable, such as when a user forgets to activate the VPN. These attacks can be automated to multiply their impact.&lt;/p&gt;
&lt;p&gt;When an internal library and an external library have the same name, hurried developers do not even need to mistype the package name for the attack to penetrate the continuous integration/continuous deployment (CI/CD) environment — and potentially slip into production. Developers use “internal” modules that are not scoped, and the module is available for an attacker to potentially register.&lt;/p&gt;
&lt;h2 id=&#34;research-uncovers-dependency-confusion-risk&#34;&gt;Research Uncovers Dependency Confusion Risk&lt;/h2&gt;
&lt;p&gt;Security researcher Alex Birsan recently &lt;a href=&#34;https://blog.sonatype.com/sonatype-spots-150-malicious-npm-packages-copying-recent-software-supply-chain-attacks&#34;&gt;used the tactic&lt;/a&gt; to push malicious proof-of-concept (POC) code to internal development builds at more than 35 technology companies. When activated, his package simply returned a message that the package is “for security research purposes only.”&lt;/p&gt;
&lt;p&gt;One difficulty that cyber criminals—and security researchers—have in deploying a dependency confusion attack is that they must figure out the names of an organization’s internal libraries and modules. But Birsan was able to find documents that list the names of internal packages at many companies. While organizations may not have considered the lists themselves to be sensitive information, they provided a key through which an attacker (fortunately, an ethical one in this instance) was able to infiltrate the software factory at some of the world’s most technologically advanced companies.&lt;/p&gt;
&lt;p&gt;After Birsan’s research was reported, hundreds of copycats published similar Node Package Manager (npm) packages—ostensibly for research purposes. In addition, at least &lt;a href=&#34;https://info.qentinel.com/blog/dependency-confusion-attack&#34;&gt;one apparent malicious attack&lt;/a&gt; using dependency confusion has been reported. Qentinel revealed that an unknown account created libraries with names identical to the names of internal libraries on the PyPI open-source repository for Python. Fortunately, bad actors had not yet populated them with source code. The company’s pip package manager defaults to PyPI, resulting in the dependencies failing to build.&lt;/p&gt;
&lt;h2 id=&#34;managing-the-risks-of-package-managers&#34;&gt;Managing the Risks of Package Managers&lt;/h2&gt;
&lt;p&gt;Package managers are one of many software tools that help developers work more efficiently, but this apparent attack illustrates that organizations must be cognizant of the risks they pose. As libraries and the software in which they are used become increasingly complex, organizations become more vulnerable to risks like dependency confusion.&lt;/p&gt;
&lt;p&gt;One area of great concern with package managers is post-install scripts. When a library is downloaded from the package manager, the first thing the library does is run the post-install script. This is one method by which a malicious payload can be delivered in a dependency confusion attack. In npm, for example, these scripts do not even need to match the application programming interface (API) of the internal dependency. Organizations must pay more attention to the security of these tools going forward.&lt;/p&gt;
&lt;h2 id=&#34;protecting-against-dependency-confusion-vulnerabilities&#34;&gt;Protecting Against Dependency Confusion Vulnerabilities&lt;/h2&gt;
&lt;p&gt;There are several things that developers can do to protect against dependency confusion:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Do a better job of tracking dependencies.&lt;/em&gt; Many organizations have limited visibility into the sources of their software. They need to understand these dependencies and track them at a granular level.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Treat lists of internal libraries and packages as sensitive information.&lt;/em&gt; Since the success of an attack depends on knowing the name of an internal resource, organizations can no longer be casual about where this information is stored and shared.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Activate namespaced modules.&lt;/em&gt; Many package managers, including Maven and npm, now support namespaced modules, which prevents the same name from being used for two different resources.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Register namespaces on public repositories.&lt;/em&gt; Another strategy is to register the names—and similar spellings—of internal libraries and packages on all public repositories being used by the organization—even if the reserved names are never used. This would prevent attackers from tricking a developer into using an identically or similarly named package on a public repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;enhanced-features-in-contrast-application-security-platform&#34;&gt;Enhanced Features in Contrast Application Security Platform&lt;/h2&gt;
&lt;p&gt;In response to this new research, Contrast Labs and Contrast engineers embarked on a whirlwind development effort the day after Birsan’s research was published to help organizations deal with this new threat. The result is several new features in the Contrast Application Security Platform, including the command-line interface the (CLI). The Contrast CLI is available to all customers using the latest version of the Contrast Application Security Platform. These include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Developer enablement in Contrast CLI
&lt;ul&gt;
&lt;li&gt;Flag any internal libraries included in the package.json as a risk for dependency confusion&lt;/li&gt;
&lt;li&gt;Highlight libraries not scoped for the project as a warning&lt;/li&gt;
&lt;li&gt;Highlight release history to indicate if an open-source project is still being maintained before merging&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Security benchmarking in the Contrast Application Security Platform
&lt;ul&gt;
&lt;li&gt;Updates for alerts on libraries with suspicious versioning (coming soon)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;stay-tuned-for-more&#34;&gt;Stay Tuned For More!&lt;/h2&gt;
&lt;p&gt;Keep your eyes open for a follow-up blog describing some of my own discoveries about dependency confusion. I am actually one of the “copycats” researching these vulnerabilities since the news of Birsan’s work has been revealed and used this method to identify a dependency confusion issue with a software tool used by millions of workers.&lt;/p&gt;
&lt;p&gt;Additional resources readers may want to check out include the upcoming webinar “&lt;a href=&#34;https://www.contrastsecurity.com/webinar/how-dependency-confusion-poses-a-serious-risk-in-the-software-supply-chain?utm_campaign=WB-swsupchain-N-Q1FY22&amp;amp;utm_medium=email&amp;amp;_hsmi=112430204&amp;amp;_hsenc=p2ANqtz-_oISSnTOAus6qoDHHiJDFo3upN2n8n08Xax2azagfhrYtrTGe3JJKgr7Gx6KiOj1yVUt8ZrHqyPk2-ZLYBqwdk6W0MR38pxajcGmiHfg7mePRBnRs&amp;amp;utm_content=112430204&amp;amp;utm_source=hs_email&amp;amp;hsLang=en-us&#34;&gt;How Dependency Confusion Poses a Serious Risk in the Software Supply Chain&lt;/a&gt;”, and my podcast interview, “&lt;a href=&#34;https://soundcloud.com/contrastsecurity/new-open-source-dependency-confusion-vulnerability-threatens-software-supply-chain&#34;&gt;New Open-Source Dependency Confusion Vulnerability Threatens Software Supply Chain&lt;/a&gt;”.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Tips and Tactics for Creating your own Capture-the-Flag Event</title>
      <link>https://contrast.security/post/tips-and-tactics-ctfs/</link>
      <pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://contrast.security/post/tips-and-tactics-ctfs/</guid>
      <description>
        
          &lt;p&gt;Is your security awareness training program effective and making a difference? Does it fully engage your staff? What about your technical employees, such as developers and engineers? Do they view the accompanying slideshow training as a chore? One way to better motivate and engage employees in training is through gamification.&lt;/p&gt;
&lt;p&gt;According to a &lt;a href=&#34;https://www.pulselearning.com/blog/gamification-infographic/&#34;&gt;recent survey&lt;/a&gt;, 79% of security awareness training participants indicate they would be more productive and motivated if their learning environment was more like a game. Successful cybersecurity training can be gamified in a number of ways, but I will focus this blog post on hosting your own capture-the-flag (CTF) event.&lt;/p&gt;
&lt;p&gt;Instead of relying on perimeter defenses such as WAFs to protect their applications in runtime, organizations need to embrace self-protecting applications with attack defenses embedded deep inside actual application runtimes. This new, state-of-the-art AppSec approach is more effective than perimeter defenses at detecting and blocking attacks, simply because of where the actual protection is located (inside the actual application runtime).&lt;/p&gt;
&lt;h2 id=&#34;what-is-a-ctf-event&#34;&gt;What Is a CTF event?&lt;/h2&gt;
&lt;p&gt;A CTF event is a competition that takes major disciplines of information security and makes them into smaller, objectively measurable exercises. Participants attempt to solve challenges by solving, exploiting, breaking, or other cybersecurity tradecraft. There are two major types of CTFs: jeopardy and attack defend.&lt;/p&gt;
&lt;p&gt;In a &lt;em&gt;jeopardy-style CTF event&lt;/em&gt;, participants are presented a board filled with categories and challenges of varying point levels. As challenges are solved, the team earns points associated with each challenge and moves up the leaderboard accordingly. Ties are often broken by whichever team first achieved the score. Jeopardy CTF contests are the most common form of cybersecurity competition today.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#39;../../images/ctf-jeopardy.webp&#39; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Attack defend CTF events&lt;/em&gt; are quite different in structure. Each team is scored based on the amount of time they keep services up and running throughout the event. Meanwhile, each team can also attack other teams’ services, which are often intentionally vulnerable in myriad ways.&lt;/p&gt;
&lt;p&gt;From an educational standpoint, especially from the lens of developers, I believe the jeopardy-style CTF is best. Here, each participant is focused on challenging themselves, not their competitors. Thus, for the purposes of this post, I will address jeopardy-style CTFs only.&lt;/p&gt;
&lt;h2 id=&#34;creating-the-ctf-event&#34;&gt;Creating the CTF Event&lt;/h2&gt;
&lt;p&gt;Having previously created or assisted in organizing dozens of CTF events, I consider myself to be adept at what it takes to host an effective event. CTF contests can help train participants by teaching them to think like a bad actor. The premise is that people retain the most knowledge by &lt;a href=&#34;https://www.chronicle.com/article/Your-Students-Learn-by-Doing/243277&#34;&gt;doing rather than listening&lt;/a&gt;. As a result, when competitors approach challenges with malicious intent, they are much more aware of what they need to consider in their own applications.&lt;/p&gt;
&lt;h2 id=&#34;know-your-audience&#34;&gt;Know Your Audience&lt;/h2&gt;
&lt;p&gt;In order to create a successful CTF event, the first question you must ask yourself is who is your audience? For example, if your audience are neophytes, you may want to limit the scope of the contest and focus on fundamentals. Similarly, if your audience is comprised of InfoSec professionals, you need to ensure challenges are up to date and that you have a wide range of categories.&lt;/p&gt;
&lt;h2 id=&#34;selecting-ctf-categories&#34;&gt;Selecting CTF Categories&lt;/h2&gt;
&lt;p&gt;Choosing categories for your audience can help focus your scope. Common CTF categories are listed below, along with a non-exhaustive description.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Category&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Web&lt;/td&gt;
&lt;td&gt;These types of challenges utilize websites and typically include &lt;a href=&#34;https://www.contrastsecurity.com/knowledge-hub/glossary/owasp-top-10?hsLang=en-us&#34;&gt;OWASP Top 10&lt;/a&gt; vulnerabilities and/or &lt;a href=&#34;https://www.contrastsecurity.com/knowledge-hub/glossary/security-misconfigurations?hsLang=en-us&#34;&gt;misconfigurations&lt;/a&gt;. Often, these have a low barrier of entry, as almost everyone has used websites before and the easier vulnerabilities are highly publicized.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Forensics&lt;/td&gt;
&lt;td&gt;Forensics challenges cover a wide range of challenges. Sometimes, this involves reconnaissance work, steganography, malformed files, and even packet captures if a networking category does not exist. Often, when there is not enough for a full forensics category, it can be made into a miscellaneous category with other challenge fillers. Again, low barrier of entry is important since there are a lot of &lt;a href=&#34;https://www.contrastsecurity.com/knowledge-hub/glossary/open-source-security-guide?hsLang=en-us&#34;&gt;open-source&lt;/a&gt; forensics tools to utilize.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Miscellaneous&lt;/td&gt;
&lt;td&gt;Miscellaneous is exactly what it sounds like: It is a place to put challenges in instances where there are not enough for an entire category. However, it is also a great place for a couple of non-technical challenges, which helps ensure that the CTF event is beginner friendly. For competitors who might be a bit overwhelmed, some trivia or reconnaissance work can be helpful in the miscellaneous category.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cryptography&lt;/td&gt;
&lt;td&gt;This category involves higher levels of mathematics. Cryptography is a great category, as contestants use forms of cryptography in the professional lives every day, and they often do not even think about it. The barrier for entry is higher here since not everyone has experience with the levels of math required to complete cryptography challenges. That said, you can certainly make some easier ciphers like a Caesar cipher or another substitution cipher.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Networking&lt;/td&gt;
&lt;td&gt;This category is relatively specific and occasionally gets rolled into the forensics and/or miscellaneous categories. It encompasses all disciplines of network engineering and commonly utilizes and hides flags inside of large packet captures.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reversing&lt;/td&gt;
&lt;td&gt;Reverse engineering is one of the more difficult categories to approach without any real experience. A typical CTF challenge is a binary that has a method to return a flag buried in the code. Participants must parse through the binary and reverse engineer it until they can figure out how to call or form the flag from the binary’s code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pwn / Exploit&lt;/td&gt;
&lt;td&gt;Pwn or exploitation categories involve the misuse or breaking of something for complete access control of the challenge. These challenges are actually more accurate than some of the other categories and most closely resemble Black Hat hacking. A common challenge in this category would be a buffer overflow exploit in which the user must overwrite code to a certain address.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;pick-a-theme&#34;&gt;Pick a Theme&lt;/h2&gt;
&lt;p&gt;This might sound unimportant, but CTF contests are definitely enhanced when the challenges circle around a theme. Theming the CTF event makes each challenge a fun story that includes a goal. This is vital because good CTF challenges tell a story. They give the participant a reason to attack a challenge, and they give a way for the challenge creator to give away hints if they want to do so. At bare minimum, they have the option to point contestants in the proper direction (more on this topic below).&lt;/p&gt;
&lt;p&gt;Some popular themes in CTF events where I have been involved classic movies, like Jurassic Park or Back to the Future. However, I’ve also been a part of CTFs with wider-scoped themes, like Retro Video Games or Western CTF. In each of these themes, the challenge creator can create a story around a hero (the participant) and a bad actor (Nedry, Biff, Bowser, Outlaws).&lt;/p&gt;
&lt;h2 id=&#34;choose-the-ctf-event-framework&#34;&gt;Choose the CTF Event Framework&lt;/h2&gt;
&lt;p&gt;The next two topics go hand in hand. As the CTF creator, you must ensure that the CTF framework you choose can handle the challenges you intend to write. I don’t mean handle the load. But rather, as an example, if you intend to have coding challenges, you will likely need to create some sort of custom scoring system. Or, if you want to have challenges where participants can literally own the box, you’ll need a framework that can spin up user-isolated containers to ensure competitors don’t delete flags or mess with boxes.&lt;/p&gt;
&lt;p&gt;Some potential CTF frameworks that I’ve used in the past include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://redctf.org/&#34;&gt;RedCTF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Full disclosure: This is a framework that a couple of friends and I wrote. It’s open source and the documentation is a little lacking right now, but it’s a scalable, user-isolated framework.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://ctfd.io/&#34;&gt;CTFd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the most popular CTF framework right now. (I competed in three CTFs recently that used this framework.) Also, it is open source, requiring a fair amount of configuration and lacking the ability to employ user-isolated challenges.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;write-the-challenges&#34;&gt;Write the Challenges&lt;/h2&gt;
&lt;p&gt;Writing challenges is definitely the most difficult part of creating a CTF contest. Oftentimes, I bookmark articles I read throughout the year as potential inspiration for challenges. If you can, try to get several people to assist in creating challenges—diversity for challenge sets is great, plus you’ll get done faster with the additional help!&lt;/p&gt;
&lt;p&gt;When creating a challenge, I like to tell a story with the theme. Am I trying to log in to this website as an administrator? Am I searching for a flag hidden inside a photo? These types of questions can be answered with a good story that matches the theme.&lt;/p&gt;
&lt;p&gt;Additionally, sometimes I like to sneak hints into titles or descriptions of the challenges, especially on the easier point values. For example, a challenge may talk about a user and their financial PATH. That would seem to indicate a &lt;a href=&#34;https://www.contrastsecurity.com/knowledge-hub/glossary/path-traversal-or-directory-traversal?hsLang=en-us&#34;&gt;path traversal vulnerability&lt;/a&gt;, and it would be a good hint for someone who is still a beginner at CTF contests.&lt;/p&gt;
&lt;p&gt;Stories and hints are fun, but the most important thing to keep in mind when writing a challenge is to make sure it’s logical and sane. The best way to do this is to have another challenge creator solve it with you. They can give you honest feedback about your challenge.&lt;/p&gt;
&lt;p&gt;You will get complaints if you release challenges that are deemed guesswork. I’ve seen plenty of challenges like this before (e.g., contestants needing to open a binary in a particular reverse engineering tool and scrolling out the control flow graph until it spells out a flag). Or where you get a latitude and longitude and must go to street view and scroll around until you find a sign, take the name of the sign, and MD5 it to get a flag. You can understand how these challenges would be difficult to solve, especially if you were using the wrong debugging program or the town name instead of a sign’s name.&lt;/p&gt;
&lt;p&gt;In addition to the above, I encourage you to keep a spreadsheet or repository to track challenges as they are created so you know what remains to be completed and if any categories need more challenges (viz., look “light”).  Another professional tip: Have each creator write a solution to their challenge and commit it as well. Not every challenge creator will be available throughout the entirety of the CTF contest, so it will be good to help other creators answer questions about your challenges. Plus, if you’re so inclined, you can release the solutions after the CTF event.&lt;/p&gt;
&lt;h2 id=&#34;test-the-challenges&#34;&gt;Test the Challenges&lt;/h2&gt;
&lt;p&gt;Now that you’ve written all your challenges, you need to test each one to ensure everything is working properly and your team is comfortable with every challenge being released. The best way to do this is to stand up a working copy of the CTF contest in the environment you plan on running it in (e.g., AWS, Azure, etc.). That way you can solve each challenge &lt;em&gt;and&lt;/em&gt; test the flags to be sure they’re written down correctly.&lt;/p&gt;
&lt;h2 id=&#34;host-the-ctf-event&#34;&gt;Host the CTF Event&lt;/h2&gt;
&lt;p&gt;Now that you and your team have written all of the challenges, it is time for the best part: hosting the CTF event. Do not expect to kick your feet back; rather, plan on getting a lot of questions. This is a great way to get facetime with people you don’t often see when doing security training. Also, answering questions is a good way to demonstrate competency to your participants, which is important because you are a trusted resource as a company security professional.&lt;/p&gt;
&lt;p&gt;Indeed, answering questions is a large part of your time as a CTF event host. However, you also need to make sure to check that the framework is up and running every so often and to verify challenges for any that may need extra hints. I typically don’t give out a ton of hints unless there are several challenges that haven’t been solved.&lt;/p&gt;
&lt;p&gt;Creating a CTF contest can be a lot of work, and you may ask yourself, “Is it worth it?” Well, when the following issues are addressed, the answer is a definitive “yes!”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How engaged people are in this gamified security training.&lt;/li&gt;
&lt;li&gt;How your team was able to demonstrate its expertise.&lt;/li&gt;
&lt;li&gt;How your team was able to get to know participants.&lt;/li&gt;
&lt;li&gt;How much fun everybody had!&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>Privilege Escalation in Popular Blogging Platform</title>
      <link>https://contrast.security/post/privilege-escalation-ghost/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://contrast.security/post/privilege-escalation-ghost/</guid>
      <description>
        
          &lt;p&gt;&lt;a href=&#34;https://github.com/TryGhost/Ghost&#34;&gt;Ghost&lt;/a&gt; is a popular open source blogging platform written in Node.js. It is downloaded around 8,500 times a week according to &lt;a href=&#34;https://www.npmjs.com/package/ghost&#34;&gt;npm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Like all good open source projects, Ghost has a defined process for &lt;a href=&#34;https://ghost.org/docs/security/#reporting-vulnerabilities&#34;&gt;reporting vulnerabilities&lt;/a&gt;. On July 18, 2018, Contrast Security&#39;s Matt Austin discovered Ghost users could escalate their privileges by embedding malicious JavaScript in their blog entries. His submission was sent to &lt;a href=&#34;mailto:security@ghost.org&#34;&gt;security@ghost.org&lt;/a&gt; as outlined in Ghost’s responsible disclosure guidelines.&lt;/p&gt;
&lt;h2 id=&#34;matts-submission&#34;&gt;Matt&#39;s Submission&lt;/h2&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;A non-administrative user (editor, author, contributor) can create a post with a “Code Injection” into the blog header. This user can add javascript to the header that when viewed by an administrator is executed as the administrator.&lt;/p&gt;
&lt;h3 id=&#34;steps-to-reproduce&#34;&gt;Steps to Reproduce&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Login as an underprivileged user. (named Bob in the example below)&lt;/li&gt;
&lt;li&gt;Create a new post or story.&lt;/li&gt;
&lt;li&gt;Click on the Gear icon on the top right and click “Code Injection”&lt;/li&gt;
&lt;li&gt;Add the following code to the “Post Header” in a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag: &lt;a href=&#34;https://gist.github.com/matt-/15285acc7365997eb6ae6af914fb3105#file-make_admin-html&#34;&gt;https://gist.github.com/matt-/15285acc7365997eb6ae6af914fb3105#file-make_admin-html&lt;/a&gt;&lt;br&gt;
(Change the name “Bob” in the code to your current user name)&lt;/li&gt;
&lt;li&gt;If you press save (cmd+s on mac) and click on the View Preview button:&lt;/li&gt;
&lt;li&gt;The link will look something like &lt;a href=&#34;http://someblog.com/p/48ba590b-7e25-494f-b9e8-d9a6d7e5eb1b/&#34;&gt;http://someblog.com/p/48ba590b-7e25-494f-b9e8-d9a6d7e5eb1b/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Send this link to an Administrator user (hide it in an iframe, mask it with a URL shortener). When viewed the injected code will modify the user (“Bob” in this case) giving him the Administrator role.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;poc-video&#34;&gt;POC Video&lt;/h3&gt;

&lt;div class=&#34;video&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/4zGrdDusEjo?controls=1&amp;rel=0&#34; loading=&#34;lazy&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;As you can see in the video, Matt was able to successfully elevate his privilege from an “Author” to an “Administrator” simply by getting an Administrator user to click on the blog preview link.&lt;/p&gt;
&lt;p&gt;Based on Ghost’s documentation on user roles, there are 5 distinct roles used for different privilege within the Ghost system.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Contributors: Can log in and write posts, but cannot publish&lt;/li&gt;
&lt;li&gt;Authors: Can create and publish new posts and tags&lt;/li&gt;
&lt;li&gt;Editors: Can invite, manage and edit authors and contributors&lt;/li&gt;
&lt;li&gt;Administrators: Have full permissions to edit all data and settings&lt;/li&gt;
&lt;li&gt;Owner: An admin who cannot be deleted and has access to billing details&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, Matt never received any feedback from his submission to Ghost about the privilege escalation bypass. On October 16, 2018, a new &lt;a href=&#34;https://github.com/TryGhost/docs/commit/c65058852181813a216fdc8b8134dc7c4e1aba84#diff-cb5c147b83c6023fea4cec2b394f3fd4&#34;&gt;commit&lt;/a&gt; was submitted to the GitHub repository for Ghost that said:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;#### However, we&amp;#39;re generally _not_ interested in...
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;- [Privilege escalation](#xss--privilege-escalation-attacks) as result of trusted users publishing arbitrary JavaScript&amp;lt;sup&amp;gt;&amp;lt;a href=&amp;#34;#xss--privilege-escalation-attacks&amp;#34;&amp;gt;1&amp;lt;/a&amp;gt;&amp;lt;sup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Still, no response from Ghost to Matt’s submission, not even a thank you for your submission, we have updated our disclosure program to not involve privilege escalation.&lt;/p&gt;
&lt;p&gt;Ghost also added the following, explaining their position:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;Privilege escalation attacks
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;Ghost is a content management system and all users are considered to be privileged/trusted. A user can only obtain an account and start creating content after they have been invited by the site owner or similar administrator-level user.
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;A basic feature of Ghost as a CMS is to allow content creators to make use of scripts, SVGs, or embedded content that is required for the content to display as intended. Because of this, there will always be the possibility of &amp;#34;XSS&amp;#34; attacks, albeit only from users that have been trusted to build the site&amp;#39;s content.
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;Ghost&amp;#39;s admin application does a lot to ensure that unknown scripts are not run within the admin application itself, however, that only protects one side of a Ghost site. If the front-end (the rendered site that anonymous visitors see) shares the same domain as the admin application then browsers do not offer sufficient protection to prevent successful XSS attacks by trusted users.
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;If you are concerned that trusted users you invite to create your site will act maliciously the best advice is to split your front-end and admin area onto different domains (e.g. https://mysite.com and https://mysiteadmin.com/ghost/). This way browsers offer greater built-in protection because credentials cannot be read across domains. Even in this case, it should be understood that you are giving invited users completely free reign in content creation so absolute security guarantees do not exist.
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;We take any attack vector where an untrusted user is able to inject malicious content very seriously and welcome any and all reports.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As of April 29, 2019, Matt had not received a response from Ghost, so we are following our normal process of disclosure, as we feel the issue at hand warrants a fix, or at least a discussion from the community. We want applications to be secure, so let’s work together to fix the issues that need to be fixed and make sure all users feel safe using the Ghost platform.&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
