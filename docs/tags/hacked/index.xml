<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hacked on Contrast Labs</title>
    <link>https://contrast.security/tags/hacked/</link>
    <description>Recent content in hacked on Contrast Labs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2021, Contrast Security; all rights reserved.</copyright>
    <lastBuildDate>Thu, 04 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://contrast.security/tags/hacked/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Contrast Labs Reveals Dependency Confusion Vulnerability in Microsoft Teams</title>
      <link>https://contrast.security/post/dependency-confusion-microsoft-teams/</link>
      <pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://contrast.security/post/dependency-confusion-microsoft-teams/</guid>
      <description>
        
          &lt;p&gt;When the &lt;a href=&#34;https://www.contrastsecurity.com/security-influencers/hackers-exploiting-covid-19-what-organizations-can-prevent?hsLang=en-us&#34;&gt;COVID-19 pandemic&lt;/a&gt; forced a large percentage of the world’s office workers to begin working remotely a year ago, organizations were forced to scramble to greatly accelerate their digital transformation. Deployments that may have been planned for years in the future suddenly had to be pulled off in a matter of weeks and days—all because of a sudden change in the way people work.&lt;/p&gt;
&lt;p&gt;Teleconferencing and collaboration tools were one key area that required swift action. Such tools had already been growing in importance in businesses of all types, but when offices closed, they became indispensable. Microsoft Teams was one of the tools that kept professionals—and the global economy— going at full speed during the pandemic. It is no wonder that the number of daily average users (DAU) on that application &lt;a href=&#34;https://tomtalks.blog/2020/12/microsoft-teams-statistics/#:~:text=Microsoft%20Teams%20usage%20statistics&amp;amp;text=There%20were%2044%20million%20users,115%20million%20daily%20active%20users.&#34;&gt;increased&lt;/a&gt; from 44 million in April 2020 to 75 million the following month.&lt;/p&gt;
&lt;p&gt;By December, Microsoft announced that Teams had reached &lt;a href=&#34;https://www.microsoft.com/en-us/microsoft-365/blog/2020/10/28/microsoft-teams-reaches-115-million-dau-plus-a-new-daily-collaboration-minutes-metric-for-microsoft-365/&#34;&gt;115 million DAU&lt;/a&gt; — a 260% increase over nine months. At the same time, the company reported that Microsoft 365 users around the world were spending &lt;a href=&#34;https://www.microsoft.com/en-us/microsoft-365/blog/2020/10/28/microsoft-teams-reaches-115-million-dau-plus-a-new-daily-collaboration-minutes-metric-for-microsoft-365/&#34;&gt;30 billion minutes per day&lt;/a&gt; collaborating with colleagues using Teams. This astounding statistic reflects both the large number of new users and increased usage by longtime customers—one consequence of a largely home-based workforce.&lt;/p&gt;
&lt;p&gt;These numbers make it abundantly clear that Teams has become a critical tool for many businesses, nonprofits, and government agencies. Organizations that use Teams should be aware of the dependency confusion vulnerability that I recently discovered in that application and reported to Microsoft. Fortunately, Microsoft has already taken steps to deal with the specific issue I identified. But given the number of similar vulnerabilities that have been discovered over the past few weeks, it is clear that dependency confusion is a common problem across the industry.&lt;/p&gt;
&lt;h2 id=&#34;dependency-confusion-research-uncovers-new-vulnerabilities&#34;&gt;Dependency Confusion Research Uncovers New Vulnerabilities&lt;/h2&gt;
&lt;p&gt;First, a little background. As I described in a &lt;a href=&#34;https://www.contrastsecurity.com/security-influencers/dependency-confusion-a-new-third-party-risk-for-the-software-factory?hsLang=en-us&#34;&gt;recent blog post&lt;/a&gt;, security researcher Alex Birsan &lt;a href=&#34;https://blog.sonatype.com/sonatype-spots-150-malicious-npm-packages-copying-recent-software-supply-chain-attacks&#34;&gt;used dependency confusion attacks&lt;/a&gt; to push harmless proof-of-concept (POC) code to internal application development builds at more than 35 technology companies. Needless to say, his research generated significant buzz in the development and application security communities when it was published. The fact that he was able to infiltrate the software factories at some of the world’s most technologically advanced companies should give pause to any organization that uses software.&lt;/p&gt;
&lt;p&gt;Dependency confusion involves the creation of packages on third-party libraries that have identical names to packages stored in a company’s internal repository. The goal is to trick developers and automated systems into using the wrong library because of defaults configured into package managers that show a preference for external libraries over internal ones.&lt;/p&gt;
&lt;p&gt;While it should be difficult for external users—whether bad actors, legitimate developers, or security researchers—to even find the names of packages stored in internal repositories, Birsan was able to find the names of these packages in the applications themselves—and was able to replicate that accomplishment over at least 35 applications.&lt;/p&gt;
&lt;p&gt;Since Birsan’s research was published, &lt;a href=&#34;https://www.bleepingcomputer.com/news/security/malicious-npm-packages-target-amazon-slack-with-new-dependency-attacks/&#34;&gt;multiple reports&lt;/a&gt; of bad actors using the technique have &lt;a href=&#34;https://info.qentinel.com/blog/dependency-confusion-attack&#34;&gt;started to appear&lt;/a&gt;. In addition, other security researchers, including myself, began exploring various Software-as-a-Service (SaaS)-based applications to see if we could find dependency confusion vulnerabilities that could be exploited by attackers.&lt;/p&gt;
&lt;h2 id=&#34;my-research-on-microsoft-teams&#34;&gt;My Research on Microsoft Teams&lt;/h2&gt;
&lt;p&gt;A member of the Contrast Labs team, I specialize in security research on applications created with the Electron framework, including Microsoft Teams. Previously, I have discovered and reported several remote code execution vulnerabilities in that application. Given my background, I decided to contribute to the effort by examining Teams to see if I could identify a dependency confusion vulnerability.&lt;/p&gt;
&lt;h2 id=&#34;optional-dependencies-provide-an-opening&#34;&gt;Optional Dependencies Provide an Opening&lt;/h2&gt;
&lt;p&gt;I began by looking at the dependencies used by the Teams desktop application. In one section of the application, I saw a node.js package called “Optional Dependencies.” Typically, the intent of optional dependencies is to provide a place to store binary files that are a part of the testing suite, but not the production application.&lt;/p&gt;
&lt;p&gt;The interesting thing about optional dependencies is that if they do not exist in the repository from which a developer is trying to pull them, the build will fail silently. Thus, developers must write code that is relatively defensive when optional dependencies exist. Specifically, one cannot “depend” on a dependency that is optional.&lt;/p&gt;
&lt;p&gt;Inside the Teams desktop application is a package file that lists the dependencies that the application needed in order to be built. When one downloads and installs the application, it does not reach out to the dependency managers. This is because every part of the application is built on a Microsoft server somewhere, after which it is shipped to customers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/teams-manifest.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now back to what I discovered. When analyzing the package, I noticed a number of modules in both public and private repositories. I also saw that some of the private packages were not taking advantage of the &lt;a href=&#34;https://docs.npmjs.com/cli/v7/using-npm/scope&#34;&gt;scoping capability&lt;/a&gt; provided by npm. I noted that some of the optional dependencies did not exist on disk inside the package itself. This means that during the build process those dependencies would not be found in any repository—public or private. By design, these optional dependencies failed silently whenever the application attempted to pull them from both the public and private repositories.&lt;/p&gt;
&lt;h2 id=&#34;my-probe-gets-a-response&#34;&gt;My Probe Gets a Response&lt;/h2&gt;
&lt;p&gt;I then selected one of the modules that was listed as an “optional dependency” and registered it on npm, setting the version to 0.0.1. I added a simple line of code in the install script of the package to alert me when it was installed. Once I was ready to deploy, I set the version of the module to match the version number from the application. At this point, I had two choices: bump the version number up by one and wait for Microsoft to update and pull in the new version, or keep it at the current version and hope that a build server would pull in a fresh copy of it (not using packagelock.json).&lt;/p&gt;
&lt;p&gt;There are risks either way, but I decided to do what would be least impactful—keeping the version number the same. As soon as I set one of the dependencies to a high enough version, I started getting requests from the module being installed from a number of internal Microsoft IP addresses. The name of the module was relatively generic, but it was Microsoft-specific and not an overly common word.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/teams-post-install.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I happened to be doing this research late at night. Based on that and other factors, I deduced that the responses were most likely from internal, automated resources within Microsoft that were pulling the dependencies and installing them—perhaps an automated continuous integration/continuous deployment (CI/CD) server. But it could also have been a live developer working a late shift in the U.S. or a daytime shift somewhere overseas.&lt;/p&gt;
&lt;h2 id=&#34;the-risk-posed-by-this-vulnerability&#34;&gt;The Risk Posed By This Vulnerability&lt;/h2&gt;
&lt;p&gt;Whether the responses I saw were automated or manual, the fact that I was able to generate this reaction poses significant risk. By taking advantage of the post-install script, I was able to execute code in whatever environment this was being installed on. If attackers were to execute code the way I did on a build server for a desktop application update that was about to be distributed, they could insert anything they wanted into that update, and that code would go out to every desktop using Teams—more than 115 million machines. Such an attack could have monumental repercussions, potentially affecting as many organizations as the massive &lt;a href=&#34;https://www.contrastsecurity.com/security-influencers/solarwinds-hack-exposes-long-overdue-prioritization-of-software-security?hsLang=en-us&#34;&gt;attack on the SolarWinds software factory&lt;/a&gt; that was revealed in December.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/teams-build-server.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And the risk of this vulnerability may not be limited to Microsoft Teams. The fact that this package is stored in an internal repository means that it is likely used in any number of other Microsoft products. If the code in question were only a part of the Teams desktop application, it would likely be simply added to the software as custom code rather than being stored in an internal repository. As an example, the specific module used in this case is also used by Skype, which could potentially fall victim to the same kind of attack.&lt;/p&gt;
&lt;h2 id=&#34;protecting-the-software-supply-chain&#34;&gt;Protecting the Software Supply Chain&lt;/h2&gt;
&lt;p&gt;The research findings described here highlight the need for organizations to take the entire software supply chain into account when designing an application security strategy. The need to protect internally developed applications—and the third-party libraries that comprise so much of their code base these days—may seem obvious. And the importance of securing and properly configuring the developer tools used to build that software is becoming more apparent as vulnerabilities like dependency confusion are revealed.&lt;/p&gt;
&lt;p&gt;But the software supply chain does not end with the internal software factory. The potential vulnerability that I discovered in Microsoft Teams is a reminder that an organization’s application security strategy must extend to include off-the-shelf applications that every organization uses for vital business functions. Microsoft customers using the Teams desktop application have no control over how that software is produced, but they must be prepared for instances when it may be compromised.&lt;/p&gt;
&lt;h2 id=&#34;the-story-continues&#34;&gt;The Story Continues&lt;/h2&gt;
&lt;p&gt;I submitted this vulnerability to Microsoft late in the day on February 12—the Friday before a holiday weekend. Since my submission, I have received feedback from Microsoft that the packages we viewed as “at risk” were removed—or more specifically “unpublished by npm-support.” (It should be noted that Microsoft owns GitHub, which owns npm.) This means that these specific packages no longer pose a risk to Microsoft and its customers. As a result of these actions, Microsoft closed the issue as a “No Fix.” However, Microsoft has yet to give us any information around their internal investigations around their actual risk.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../images/teams-timeline.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Working on bug bounties is a regular part of what my team and I do at Contrast Labs. I personally derive a lot of enjoyment from doing security research. It keeps me sharp and helps keep me up with the tactics of cyber criminals. In particular, since we use a lot of SaaS applications internally at Contrast, it helps our organization as much as it helps others.&lt;/p&gt;
&lt;h2 id=&#34;for-more-information&#34;&gt;For More Information&lt;/h2&gt;
&lt;p&gt;For more information on newly discovered dependency confusion vulnerabilities impacting the software factories at numerous companies, read my earlier blog, “&lt;a href=&#34;https://www.contrastsecurity.com/security-influencers/dependency-confusion-a-new-third-party-risk-for-the-software-factory?hsLang=en-us&#34;&gt;Dependency Confusion: A New Third-Party Risk for the Software Factory&lt;/a&gt;”.&lt;/p&gt;
&lt;p&gt;Readers also may want to check out the webinar, “&lt;a href=&#34;https://www.contrastsecurity.com/webinar/how-dependency-confusion-poses-a-serious-risk-in-the-software-supply-chain?utm_campaign=WB-swsupchain-N-Q1FY22&amp;amp;utm_medium=email&amp;amp;_hsmi=112430204&amp;amp;_hsenc=p2ANqtz-_oISSnTOAus6qoDHHiJDFo3upN2n8n08Xax2azagfhrYtrTGe3JJKgr7Gx6KiOj1yVUt8ZrHqyPk2-ZLYBqwdk6W0MR38pxajcGmiHfg7mePRBnRs&amp;amp;utm_content=112430204&amp;amp;utm_source=hs_email&amp;amp;hsLang=en-us&#34;&gt;How Dependency Confusion Poses a Serious Risk in the Software Supply Chain&lt;/a&gt;”, and my interview for the Inside AppSec Podcast, “&lt;a href=&#34;https://soundcloud.com/contrastsecurity/contrast-labs-researcher-finds-dependency-confusion-vulnerability-in-microsoft-teams&#34;&gt;Contrast Labs Researcher Finds Dependency Confusion Vulnerability in Microsoft Teams&lt;/a&gt;”.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Dependency Confusion: A New Third-Party Risk for the Software Factory</title>
      <link>https://contrast.security/post/dependency-confusion-third-party-risk/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://contrast.security/post/dependency-confusion-third-party-risk/</guid>
      <description>
        
          &lt;p&gt;The SolarWinds attack has been extensively covered over the past two months—and rightly so. It has been characterized as among the worst hacks of the past 10 years, targeting SolarWinds’ software factory and compromising the code in software updates delivered to its customers.&lt;/p&gt;
&lt;p&gt;Russian nation-state attackers first gained access to the server development environment for the SolarWinds Orion infrastructure management platform in &lt;a href=&#34;https://www.itpro.com/security/358288/solarwinds-hackers-breached-systems-september-2019&#34;&gt;September 2019&lt;/a&gt; — 14 months before the attack was discovered. Microsoft President Brad Smith estimates that more than &lt;a href=&#34;https://www.infosecurity-magazine.com/news/microsoft-1000-hackers-worked/&#34;&gt;1,000 Russian engineers&lt;/a&gt; worked on the project.&lt;/p&gt;
&lt;p&gt;After moving laterally in the SolarWinds network, the attackers used &lt;a href=&#34;https://www.crowdstrike.com/blog/sunspot-malware-technical-analysis/&#34;&gt;SUNSPOT&lt;/a&gt; malware to insert a dynamic link library (called &lt;a href=&#34;https://www.cynet.com/attack-techniques-hands-on/sunburst-backdoor-c2-communication-protocol/&#34;&gt;SUNBURST&lt;/a&gt;) to create a backdoor into more than &lt;a href=&#34;https://www.bloomberg.com/news/articles/2020-12-18/russia-linked-solarwinds-hack-ensnares-widening-list-of-victims&#34;&gt;18,000 networks&lt;/a&gt; belonging to customers that installed the malicious update. These customers include &lt;a href=&#34;https://www.cnn.com/2020/12/16/politics/us-government-agencies-hack-uncertainty/index.html&#34;&gt;multiple U.S. federal government agencies&lt;/a&gt; and major &lt;a href=&#34;https://www.businessinsider.com/solarwinds-hack-explained-government-agencies-cyber-security-2020-12&#34;&gt;private corporations&lt;/a&gt; like Microsoft, Cisco, Intel, and Deloitte.&lt;/p&gt;
&lt;h2 id=&#34;protecting-the-entire-software-supply-chain&#34;&gt;Protecting the Entire Software Supply Chain&lt;/h2&gt;
&lt;p&gt;The SolarWinds event is a wake-up call to all organizations to prioritize application security—not just because of massive attacks like this one, but also because of the smaller-scale attacks that occur every day—and can potentially bring significant damage to organizations of all sizes.&lt;/p&gt;
&lt;p&gt;This event is also a reminder that organizations need to protect every element of the software supply chain, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;What you write&lt;/em&gt;: Custom code developed in-house&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What you build with&lt;/em&gt;: Hundreds of software development tools in use at many organizations&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What you buy&lt;/em&gt;: Off-the-shelf Software-as-a-Service (SaaS) applications&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What you use&lt;/em&gt;: The numerous third-party libraries that most applications depend on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Organizations must proactively work to prevent and remediate vulnerabilities in every part of the software supply chain. Recent research uncovered a new vulnerability for organizations that utilize internal and third-party libraries in their applications. But before we talk about this newly discovered dependency confusion vulnerability, I want to discuss a long-time attack tactic that is an antecedent to dependency confusion.&lt;/p&gt;
&lt;h2 id=&#34;typosquatting-taking-advantage-of-mistyping-and-inattention&#34;&gt;Typosquatting: Taking Advantage of Mistyping and Inattention&lt;/h2&gt;
&lt;p&gt;The SolarWinds attack was far from the first in which the source code of an application was manipulated by bad actors. One example is &lt;a href=&#34;https://www.csoonline.com/article/3600594/what-is-typosquatting-a-simple-but-effective-attack-technique.html&#34;&gt;typosquatting&lt;/a&gt;, which cyber criminals have used for numerous years dupe developers into using contaminated open-source libraries. The principle is simple: Busy developers’ fingers sometimes hit an incorrect key on the keyboard, so attackers reserve package names that are very similar to a legitimate package name to mimic the library that is being sought.&lt;/p&gt;
&lt;p&gt;Consider the following example. If the name of the legitimate package is Express, a cyber criminal might reserve “exprss,” “expres,” and “xpress” in the hope that developers will mistype the name. If the misspelled name returns an existing package, the developer might simply click on it rather than noticing that it is not the intended package.&lt;/p&gt;
&lt;p&gt;To avoid tipping off the developer of the error, cyber criminals program the malicious package to behave like the legitimate one — nothing seems out of the ordinary. But after the package is in the code base, the attacker sends out an update to the package to deliver malicious content into the software.&lt;/p&gt;
&lt;p&gt;To be successful, typosquatting requires victims to mistype the name of a package — and not notice the typo. And while some package managers try to combat the tactic by disallowing common misspellings of some words as package names, there is no way to eliminate every conceivable typo from the universe of available package names.&lt;/p&gt;
&lt;h2 id=&#34;dependency-confusion-not-dependent-on-misspelling&#34;&gt;Dependency Confusion: Not Dependent on Misspelling&lt;/h2&gt;
&lt;p&gt;Dependency confusion is a newly discovered vulnerability that attackers can use in a manner similar to typosquatting. It involves creating a package on an external library with the same name as an internal library in use at a particular organization. When they are not configured effectively, package managers often routinely default to external libraries over internal ones, while others access external libraries when an internal one is unavailable, such as when a user forgets to activate the VPN. These attacks can be automated to multiply their impact.&lt;/p&gt;
&lt;p&gt;When an internal library and an external library have the same name, hurried developers do not even need to mistype the package name for the attack to penetrate the continuous integration/continuous deployment (CI/CD) environment — and potentially slip into production. Developers use “internal” modules that are not scoped, and the module is available for an attacker to potentially register.&lt;/p&gt;
&lt;h2 id=&#34;research-uncovers-dependency-confusion-risk&#34;&gt;Research Uncovers Dependency Confusion Risk&lt;/h2&gt;
&lt;p&gt;Security researcher Alex Birsan recently &lt;a href=&#34;https://blog.sonatype.com/sonatype-spots-150-malicious-npm-packages-copying-recent-software-supply-chain-attacks&#34;&gt;used the tactic&lt;/a&gt; to push malicious proof-of-concept (POC) code to internal development builds at more than 35 technology companies. When activated, his package simply returned a message that the package is “for security research purposes only.”&lt;/p&gt;
&lt;p&gt;One difficulty that cyber criminals—and security researchers—have in deploying a dependency confusion attack is that they must figure out the names of an organization’s internal libraries and modules. But Birsan was able to find documents that list the names of internal packages at many companies. While organizations may not have considered the lists themselves to be sensitive information, they provided a key through which an attacker (fortunately, an ethical one in this instance) was able to infiltrate the software factory at some of the world’s most technologically advanced companies.&lt;/p&gt;
&lt;p&gt;After Birsan’s research was reported, hundreds of copycats published similar Node Package Manager (npm) packages—ostensibly for research purposes. In addition, at least &lt;a href=&#34;https://info.qentinel.com/blog/dependency-confusion-attack&#34;&gt;one apparent malicious attack&lt;/a&gt; using dependency confusion has been reported. Qentinel revealed that an unknown account created libraries with names identical to the names of internal libraries on the PyPI open-source repository for Python. Fortunately, bad actors had not yet populated them with source code. The company’s pip package manager defaults to PyPI, resulting in the dependencies failing to build.&lt;/p&gt;
&lt;h2 id=&#34;managing-the-risks-of-package-managers&#34;&gt;Managing the Risks of Package Managers&lt;/h2&gt;
&lt;p&gt;Package managers are one of many software tools that help developers work more efficiently, but this apparent attack illustrates that organizations must be cognizant of the risks they pose. As libraries and the software in which they are used become increasingly complex, organizations become more vulnerable to risks like dependency confusion.&lt;/p&gt;
&lt;p&gt;One area of great concern with package managers is post-install scripts. When a library is downloaded from the package manager, the first thing the library does is run the post-install script. This is one method by which a malicious payload can be delivered in a dependency confusion attack. In npm, for example, these scripts do not even need to match the application programming interface (API) of the internal dependency. Organizations must pay more attention to the security of these tools going forward.&lt;/p&gt;
&lt;h2 id=&#34;protecting-against-dependency-confusion-vulnerabilities&#34;&gt;Protecting Against Dependency Confusion Vulnerabilities&lt;/h2&gt;
&lt;p&gt;There are several things that developers can do to protect against dependency confusion:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Do a better job of tracking dependencies.&lt;/em&gt; Many organizations have limited visibility into the sources of their software. They need to understand these dependencies and track them at a granular level.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Treat lists of internal libraries and packages as sensitive information.&lt;/em&gt; Since the success of an attack depends on knowing the name of an internal resource, organizations can no longer be casual about where this information is stored and shared.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Activate namespaced modules.&lt;/em&gt; Many package managers, including Maven and npm, now support namespaced modules, which prevents the same name from being used for two different resources.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Register namespaces on public repositories.&lt;/em&gt; Another strategy is to register the names—and similar spellings—of internal libraries and packages on all public repositories being used by the organization—even if the reserved names are never used. This would prevent attackers from tricking a developer into using an identically or similarly named package on a public repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;enhanced-features-in-contrast-application-security-platform&#34;&gt;Enhanced Features in Contrast Application Security Platform&lt;/h2&gt;
&lt;p&gt;In response to this new research, Contrast Labs and Contrast engineers embarked on a whirlwind development effort the day after Birsan’s research was published to help organizations deal with this new threat. The result is several new features in the Contrast Application Security Platform, including the command-line interface the (CLI). The Contrast CLI is available to all customers using the latest version of the Contrast Application Security Platform. These include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Developer enablement in Contrast CLI
&lt;ul&gt;
&lt;li&gt;Flag any internal libraries included in the package.json as a risk for dependency confusion&lt;/li&gt;
&lt;li&gt;Highlight libraries not scoped for the project as a warning&lt;/li&gt;
&lt;li&gt;Highlight release history to indicate if an open-source project is still being maintained before merging&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Security benchmarking in the Contrast Application Security Platform
&lt;ul&gt;
&lt;li&gt;Updates for alerts on libraries with suspicious versioning (coming soon)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;stay-tuned-for-more&#34;&gt;Stay Tuned For More!&lt;/h2&gt;
&lt;p&gt;Keep your eyes open for a follow-up blog describing some of my own discoveries about dependency confusion. I am actually one of the “copycats” researching these vulnerabilities since the news of Birsan’s work has been revealed and used this method to identify a dependency confusion issue with a software tool used by millions of workers.&lt;/p&gt;
&lt;p&gt;Additional resources readers may want to check out include the upcoming webinar “&lt;a href=&#34;https://www.contrastsecurity.com/webinar/how-dependency-confusion-poses-a-serious-risk-in-the-software-supply-chain?utm_campaign=WB-swsupchain-N-Q1FY22&amp;amp;utm_medium=email&amp;amp;_hsmi=112430204&amp;amp;_hsenc=p2ANqtz-_oISSnTOAus6qoDHHiJDFo3upN2n8n08Xax2azagfhrYtrTGe3JJKgr7Gx6KiOj1yVUt8ZrHqyPk2-ZLYBqwdk6W0MR38pxajcGmiHfg7mePRBnRs&amp;amp;utm_content=112430204&amp;amp;utm_source=hs_email&amp;amp;hsLang=en-us&#34;&gt;How Dependency Confusion Poses a Serious Risk in the Software Supply Chain&lt;/a&gt;”, and my podcast interview, “&lt;a href=&#34;https://soundcloud.com/contrastsecurity/new-open-source-dependency-confusion-vulnerability-threatens-software-supply-chain&#34;&gt;New Open-Source Dependency Confusion Vulnerability Threatens Software Supply Chain&lt;/a&gt;”.&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
