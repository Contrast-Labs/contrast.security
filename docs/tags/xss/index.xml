<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xss on Contrast Labs</title>
    <link>https://contrast.security/tags/xss/</link>
    <description>Recent content in xss on Contrast Labs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2022, Contrast Security; all rights reserved.</copyright>
    <lastBuildDate>Wed, 23 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://contrast.security/tags/xss/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Contrast Agent Discovers Reflected XSS Vulnerability in Quart Framework</title>
      <link>https://contrast.security/post/xss-vuln-in-quart-python-framework/</link>
      <pubDate>Wed, 23 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://contrast.security/post/xss-vuln-in-quart-python-framework/</guid>
      <description>
        
          &lt;p&gt;If you love the &lt;a href=&#34;https://flask.palletsprojects.com/&#34;&gt;Flask&lt;/a&gt; framework but would like to leverage the async features of Python 3, &lt;a href=&#34;https://pgjones.gitlab.io/quart/&#34;&gt;Quart&lt;/a&gt; is a microframework à la Flask intended to transition applications from Flask to Quart.&lt;/p&gt;
&lt;p&gt;Contrast aims to support customers and developers using any framework. As part of my work to add support for Quart, I discovered a vulnerability in Quart v0.16.3 and earlier. This vulnerability was quickly confirmed by the Contrast &lt;a href=&#34;https://pypi.org/project/contrast-agent&#34;&gt;Python Agent&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;reflected-xss-vulnerability-in-quart&#34;&gt;Reflected XSS Vulnerability in Quart&lt;/h2&gt;
&lt;p&gt;Before delving into the vulnerability I found in Quart code, allow me to point you to some excellent resources. Reflected XSS is a well documented vulnerability. You may find more information in our Contrast Security &lt;a href=&#34;https://www.contrastsecurity.com/knowledge-hub/glossary/cross-site-scripting-prevention&#34;&gt;Cross-Site Scripting&lt;/a&gt; page which describes various types of XSS vulnerabilities, including Reflected XSS, and the &lt;a href=&#34;https://owasp.org/www-community/attacks/xss/&#34;&gt;OWASP Foundation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As a Python Agent engineer, I&#39;m deeply familiar with all types of security vulnerabilities. As I worked on adding Contrast support for Quart, I noticed that the &lt;code&gt;redirect&lt;/code&gt; function &lt;a href=&#34;https://gitlab.com/pgjones/quart/-/blob/0.16.3/src/quart/utils.py#L37&#34;&gt;injected&lt;/a&gt; the location of the redirected url directly in the response body. I saw no sanitization of the &lt;code&gt;location&lt;/code&gt; argument. I dug around the public &lt;a href=&#34;https://pgjones.gitlab.io/quart/tutorials/blog_tutorial.html&#34;&gt;Quart documentation&lt;/a&gt; and noticed that all calls to &lt;code&gt;redirect&lt;/code&gt; relied on &lt;code&gt;url_for&lt;/code&gt; having been called. My senses began tingling:  we can&#39;t always expect programmers will properlly sanitize and encode input. I could see that anything passed on to &lt;code&gt;redirect&lt;/code&gt; would be reflected right back to the user via the response body.&lt;/p&gt;
&lt;p&gt;To test my hypothesis, I ran the Contrast Python Agent and manually verified what I saw with my own eyes with a small Quart app.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;from quart import Quart, request, redirect
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;from contrast.quart import ContrastMiddleware
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;app = Quart(__name__)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;app.asgi_app = ContrastMiddleware(app)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;@app.route(&amp;#34;/bad&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;async def unvalidated_redirect():
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;    user_input = request.args.get(&amp;#34;user_input&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;    return redirect(user_input)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Serving the app with the ContrastMiddleware means that the Python Agent will assess the application code. The Python Agent immediately alerted me to a Reflected XSS vulnerability on the this app.&lt;/p&gt;
&lt;p&gt;Please note that Python Agent support for Quart will be released soon. You will be able to reproduce this at that time. To learn how to use the Python Agent for currently supported frameworks, please visit our &lt;a href=&#34;https://docs.contrastsecurity.com/en/python.html&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To manually verify that any input I send as a &lt;code&gt;user_input&lt;/code&gt; parameter will be reflected back in the response body, I issued this command on the terminal&lt;/p&gt;
&lt;p&gt;&lt;code&gt;curl &amp;quot;http://localhost:8000/bad?user_input=&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It responded back with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;!doctype html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;title&amp;gt;Redirect&amp;lt;/title&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;h1&amp;gt;Redirect&amp;lt;/h1&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;You should be redirected to &amp;lt;a href=&amp;#34;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&amp;#34;&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&amp;lt;/a&amp;gt;, if not please click the link
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Voila! The &lt;code&gt;user_input&lt;/code&gt; script is right there. For more proof, I opened this on a browser.&lt;/p&gt;
&lt;img src=&#39;../../images/reflected-xss.png&#39; /&gt;
&lt;p&gt;At Contrast we value teamwork, so my next step was to ask my fellow Python Agent developers to verify what I saw, and they confirmed. The Contrast Labs team jumped on and also confirmed the finding.&lt;/p&gt;
&lt;h2 id=&#34;response-from-quart-maintainer&#34;&gt;Response from Quart Maintainer&lt;/h2&gt;
&lt;p&gt;Once Contrast confirmed my finding, I followed Contrast&#39;s &lt;a href=&#34;https://www.contrastsecurity.com/disclosure-policy&#34;&gt;Vulnerability Disclosure Policy&lt;/a&gt; and reached out to Quart&#39;s maintainer &lt;a href=&#34;https://pgjones.dev/&#34;&gt;Phil Jones&lt;/a&gt; via email. He responded briefly after and agreed I found a security bug that needed to be fixed ASAP.&lt;/p&gt;
&lt;p&gt;Phil issued a &lt;a href=&#34;https://gitlab.com/pgjones/quart/-/commit/d125044a2292231fc5edd95cc5110d08640ecab5&#34;&gt;fix&lt;/a&gt; to the Quart code. I hope it gets released quickly!&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Privilege Escalation in Popular Blogging Platform</title>
      <link>https://contrast.security/post/privilege-escalation-ghost/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://contrast.security/post/privilege-escalation-ghost/</guid>
      <description>
        
          &lt;p&gt;&lt;a href=&#34;https://github.com/TryGhost/Ghost&#34;&gt;Ghost&lt;/a&gt; is a popular open source blogging platform written in Node.js. It is downloaded around 8,500 times a week according to &lt;a href=&#34;https://www.npmjs.com/package/ghost&#34;&gt;npm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Like all good open source projects, Ghost has a defined process for &lt;a href=&#34;https://ghost.org/docs/security/#reporting-vulnerabilities&#34;&gt;reporting vulnerabilities&lt;/a&gt;. On July 18, 2018, Contrast Security&#39;s Matt Austin discovered Ghost users could escalate their privileges by embedding malicious JavaScript in their blog entries. His submission was sent to &lt;a href=&#34;mailto:security@ghost.org&#34;&gt;security@ghost.org&lt;/a&gt; as outlined in Ghost’s responsible disclosure guidelines.&lt;/p&gt;
&lt;h2 id=&#34;matts-submission&#34;&gt;Matt&#39;s Submission&lt;/h2&gt;
&lt;h3 id=&#34;description&#34;&gt;Description&lt;/h3&gt;
&lt;p&gt;A non-administrative user (editor, author, contributor) can create a post with a “Code Injection” into the blog header. This user can add javascript to the header that when viewed by an administrator is executed as the administrator.&lt;/p&gt;
&lt;h3 id=&#34;steps-to-reproduce&#34;&gt;Steps to Reproduce&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Login as an underprivileged user. (named Bob in the example below)&lt;/li&gt;
&lt;li&gt;Create a new post or story.&lt;/li&gt;
&lt;li&gt;Click on the Gear icon on the top right and click “Code Injection”&lt;/li&gt;
&lt;li&gt;Add the following code to the “Post Header” in a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag: &lt;a href=&#34;https://gist.github.com/matt-/15285acc7365997eb6ae6af914fb3105#file-make_admin-html&#34;&gt;https://gist.github.com/matt-/15285acc7365997eb6ae6af914fb3105#file-make_admin-html&lt;/a&gt;&lt;br&gt;
(Change the name “Bob” in the code to your current user name)&lt;/li&gt;
&lt;li&gt;If you press save (cmd+s on mac) and click on the View Preview button:&lt;/li&gt;
&lt;li&gt;The link will look something like &lt;a href=&#34;http://someblog.com/p/48ba590b-7e25-494f-b9e8-d9a6d7e5eb1b/&#34;&gt;http://someblog.com/p/48ba590b-7e25-494f-b9e8-d9a6d7e5eb1b/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Send this link to an Administrator user (hide it in an iframe, mask it with a URL shortener). When viewed the injected code will modify the user (“Bob” in this case) giving him the Administrator role.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;poc-video&#34;&gt;POC Video&lt;/h3&gt;

&lt;div class=&#34;video&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/4zGrdDusEjo?controls=1&amp;rel=0&#34; loading=&#34;lazy&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;As you can see in the video, Matt was able to successfully elevate his privilege from an “Author” to an “Administrator” simply by getting an Administrator user to click on the blog preview link.&lt;/p&gt;
&lt;p&gt;Based on Ghost’s documentation on user roles, there are 5 distinct roles used for different privilege within the Ghost system.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Contributors: Can log in and write posts, but cannot publish&lt;/li&gt;
&lt;li&gt;Authors: Can create and publish new posts and tags&lt;/li&gt;
&lt;li&gt;Editors: Can invite, manage and edit authors and contributors&lt;/li&gt;
&lt;li&gt;Administrators: Have full permissions to edit all data and settings&lt;/li&gt;
&lt;li&gt;Owner: An admin who cannot be deleted and has access to billing details&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, Matt never received any feedback from his submission to Ghost about the privilege escalation bypass. On October 16, 2018, a new &lt;a href=&#34;https://github.com/TryGhost/docs/commit/c65058852181813a216fdc8b8134dc7c4e1aba84#diff-cb5c147b83c6023fea4cec2b394f3fd4&#34;&gt;commit&lt;/a&gt; was submitted to the GitHub repository for Ghost that said:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;#### However, we&amp;#39;re generally _not_ interested in...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;- [Privilege escalation](#xss--privilege-escalation-attacks) as result of trusted users publishing arbitrary JavaScript&amp;lt;sup&amp;gt;&amp;lt;a href=&amp;#34;#xss--privilege-escalation-attacks&amp;#34;&amp;gt;1&amp;lt;/a&amp;gt;&amp;lt;sup&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Still, no response from Ghost to Matt’s submission, not even a thank you for your submission, we have updated our disclosure program to not involve privilege escalation.&lt;/p&gt;
&lt;p&gt;Ghost also added the following, explaining their position:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;Privilege escalation attacks
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;Ghost is a content management system and all users are considered to be privileged/trusted. A user can only obtain an account and start creating content after they have been invited by the site owner or similar administrator-level user.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;A basic feature of Ghost as a CMS is to allow content creators to make use of scripts, SVGs, or embedded content that is required for the content to display as intended. Because of this, there will always be the possibility of &amp;#34;XSS&amp;#34; attacks, albeit only from users that have been trusted to build the site&amp;#39;s content.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;Ghost&amp;#39;s admin application does a lot to ensure that unknown scripts are not run within the admin application itself, however, that only protects one side of a Ghost site. If the front-end (the rendered site that anonymous visitors see) shares the same domain as the admin application then browsers do not offer sufficient protection to prevent successful XSS attacks by trusted users.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;If you are concerned that trusted users you invite to create your site will act maliciously the best advice is to split your front-end and admin area onto different domains (e.g. https://mysite.com and https://mysiteadmin.com/ghost/). This way browsers offer greater built-in protection because credentials cannot be read across domains. Even in this case, it should be understood that you are giving invited users completely free reign in content creation so absolute security guarantees do not exist.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;We take any attack vector where an untrusted user is able to inject malicious content very seriously and welcome any and all reports.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As of April 29, 2019, Matt had not received a response from Ghost, so we are following our normal process of disclosure, as we feel the issue at hand warrants a fix, or at least a discussion from the community. We want applications to be secure, so let’s work together to fix the issues that need to be fixed and make sure all users feel safe using the Ghost platform.&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
